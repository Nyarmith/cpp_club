Field 1 (Front)	Field 2 (Back)	Tags	Deck	Further Fields (3, 4, ...)
What is a type?	An identifier for a data structure and the operations that make sense for it		Accelerated C++
What does it mean for an operator to be <b>left-associative</b>?	It tries to use an much of an expression as it can for its left operand, and as little as it can for its right.	definition	Accelerated C++
What is scope?	The part of a program in which a name has meaning.	definition	Accelerated C++
What is a qualified name?	One which includes the :: operator	definition	Accelerated C++
What are namespaces?	A mechanism for grouping related names.	definition	Accelerated C++
How are headers included in a program?	#include &lt;header&gt;		Accelerated C++
What is a block?	A sequence of zero or more statements enclosed in braces.	definition	Accelerated C++
What is an expression?	A request for the implementation to compute something	definition	Accelerated C++
What is an expression statement?	An expression followed by a semi-colon	definition	Accelerated C++
What does it mean to be free-form?	Whitespace doesn't matter except in specific cases	definition	Accelerated C++
What is the scope operator?	::	definition	Accelerated C++
What is a variable?	An object that has a name.	definition	Accelerated C++
What is an object?	A part of the computer's memory that has a type.	definition	Accelerated C++
What is a definition?	A statement of a variable's name and type.	definition	Accelerated C++
What is an interface?	The collection of operations possible on an object of a certain type.	definition	Accelerated C++
When is a local variable destroyed?	At the end of the set of enclosing curly braces.	definition	Accelerated C++
What three events cause the system to flush the stdout buffer?	1. Buffer is full<div>2. Library asked to read from stdin</div><div>3. Library instructed to flush</div>		Accelerated C++
When is an operator overloaded?	When it has different meanings for different types	definition	Accelerated C++
What does const mean in a variable definition?	It's a promise that we are not going to change the value of the variable for the rest of its lifetime.	definition	Accelerated C++
When must a const variable be initialized?	At the same time as its definition	definition	Accelerated C++
What does std::cin &gt;&gt; v do?	Discards any whitespace, then reads characters up to next whitespace.	definition	Accelerated C++
What is a loop invariant?	A property that we assert will be true about a loop each time it is about to test its condition.	chapter:2 definition	Accelerated C++
What happens when using unsigned and signed numbers together in an expression?	The signed number is converted to unsigned.	chapter:3	Accelerated C++
What is the required minimum speed of `std::sort`?	`n*log(n)`	chapter:3	Accelerated C++
What is the scope of a `typedef`?	The same as any other declaration.	chapter:3	Accelerated C++
What is returned in an expression of the form `os &gt;&gt; x`?	The left operand	chapter:3	Accelerated C++
What header contains the standard library exceptions?	`stdexcept`	chapter:4	Accelerated C++
What does "pass-by-value" mean?	That a copy of the arguments is passed to a function.	chapter:4	Accelerated C++
What is a reference?	An alias to another object.	chapter:4	Accelerated C++
What is an lvalue (pre C++11)?	A "living value", an expression that denotes a non-temporary object.	chapter:4	Accelerated C++
What are examples of lvalues?	* the name of a variable, function or data member<div>* a function call that returns an lvalue reference</div><div>* lvalue reference</div>	chapter:4	Accelerated C++
What are examples of non-lvalues?	* literal expressions<div>* function calls that return a non-reference</div>	chapter:4	Accelerated C++
What function resets the error/EOF state of a stream?	`#clear()`	chapter:4	Accelerated C++
What is the order of operand evaluation (pre C++11)?	Unspecified	chapter:4	Accelerated C++
When dealing with exceptions, consider...	What code may be skipped or evaluated in a different order.	chapter:4	Accelerated C++
How many side-effects should exist in a single statement?	1	chapter:4	Accelerated C++
What method on exceptions returns the output message?	`#what()`	chapter:4	Accelerated C++
What is separate compilation?	Compiling different parts of a program independently.	chapter:4	Accelerated C++
How is code in different compilation units made available for use?	Through header files	chapter:4	Accelerated C++
What is the difference between header files and system headers?	System headers may not be files.	chapter:4	Accelerated C++
What is useful about the STL?	It can operate the same way on different container types.	chapter:5	Accelerated C++
How can an element be removed from a `std::vector`?	`#erase(iterator)`	chapter:5	Accelerated C++
What does `std::vector::erase(iter)` do?	Removes the element at `iter` and copies all subsequent elements down to their new positions.	chapter:5	Accelerated C++
What is an important characteristic of code that operates on containers?	Order of element access	chapter:5	Accelerated C++
What two types are defined on containers for element access?	* `iterator`<div>* `const_iterator`</div>	chapter:5	Accelerated C++
What does this expression do: `*a.m`	Dereferences member `m` of object `a`.	chapter:5	Accelerated C++
What iterators are invalidated by `std::vector::erase(iter)`?	`iter` and any that come after it	chapter:5	Accelerated C++
What premature optimization may cause bugs when iterating over a container?	Saving iterator values that are invalidated, or saving the size of the container.	chapter:5	Accelerated C++
What does it mean to describe the performance characteristics of a container?	Explain the efficiency of insertion and deletion at different locations. Describe the memory layout to support the explanation.	chapter:5	Accelerated C++
Describe the performance characteristics of `std::vector`.	Flat, contiguous section of memory with elements laid out in order. Insertion and removal at end are fast, random access is fast. Insertion and removal anywhere else requires moving all higher elements.	chapter:5	Accelerated C++
Why are iterators useful when restructuring an algorithm?	They can make the algorithm independent of the container	chapter:5	Accelerated C++
When does a `std::list` outperform a `std::vector`?	Many insertions/deletions from the middle with no random access.	chapter:5	Accelerated C++
Other then performance, what can change as a result of a change in data structure?	<div>* Iterator invalidation rules</div>* Valid operations on the container and iterators<div>* Methods used for some algorithms (`std::list::sort()`)</div>	chapter:5	Accelerated C++
How do you sort a `std::list`?	With `#sort()`, because it needed something special.	chapter:5	Accelerated C++
What is a reasonable size to start worrying about performance between a `std::list` and `std::vector`?	1000 elements	chapter:5	Accelerated C++
What does the `cctype` header contain?	Functions for querying/distinguishing characters.	chapter:5	Accelerated C++
How can you extract part of a `std::string`?	`std::string::substr(index, length)`	chapter:5	Accelerated C++
How can you concatenate two `std::vector`s?	`v.insert(v.end(), v1.begin(), v1.end())`	chapter:5	Accelerated C++
What method checks for whitespace?	`isspace(c)`	chapter:5	Accelerated C++
What method gets a line of input from a stream?	`getline(is, out)`	chapter:5	Accelerated C++
What string constructor repeats the same character `n` times?	`std::string(n, c)`	chapter:5	Accelerated C++
What are the performance characteristics of `std::list`?	Fast insertion/deletion if you already know where you want to insert/delete. Fast access at the ends, slower random access.	chapter:5	Accelerated C++
What is a <i>generic algorithm</i>?	An algorithm that is not part of any particular container.	chapter:6	Accelerated C++
How does a generic algorithm select the appropriate underlying algorithm?	Based on argument type.	chapter:6	Accelerated C++
Interpret `*out++`	`*(out++)` because `*` and `++` have the same precedence and are right-associative	chapter:6	Accelerated C++
What does it mean for something to be (left|right) associative?	That the grouping for operations start on the (left|right).	chapter:6	Accelerated C++
What header defines most standard algorithms?	`algorithm`	chapter:6	Accelerated C++
What is an iterator adapter?	A function to allow using an iterator in an algorithm.	chapter:6	Accelerated C++
Find an element in `std::vector v` that is odd.	`std::find_if(v.begin(), v.end(), [](auto e) { return e % 2 == 1; });`	chapter:6	Accelerated C++
Check if containers `c1` and `c2` are equal.	`std::equal(c1.begin(), c1.end(), c2.begin())`	chapter:6	Accelerated C++
Check if `s` is a palindrome	`std::equal(s.begin(), s.end(), s.rbegin())`	chapter:6	Accelerated C++
What does `static` mean on a local variable?	That the variable:<div>* has static storage duration</div><div>* is initialized when the function is first called</div><div>* may not be thread safe pre-C++11</div>	chapter:6	Accelerated C++
What is static storage duration?	Storage allocated at the start of a process that lasts until it dies.	chapter:6	Accelerated C++
What function checks whether a character is a letter or number?	`isalnum(c)`	chapter:6	Accelerated C++
Determine if `v` is in `c`.	`std::find(c.begin(), c.end(), v)`	chapter:6	Accelerated C++
Determine whether `c1` is in `c2`	`std::search(c2.begin(), c2.end(), c1.begin(), c1.end())`	chapter:6	Accelerated C++
Is `c` a letter?	`isalpha(v)`	chapter:6	Accelerated C++
When do iterators support indexing?	When their containers do.	chapter:6	Accelerated C++
What do algorithms typically return if nothing is found?	The end iterator for the input range.	chapter:6	Accelerated C++
Check if `c` is empty	`c.empty()`	chapter:6	Accelerated C++
Sum the values in `c`	`accumulate(c.begin(), c.end(), 0.0)`	chapter:6	Accelerated C++
How can you change the type used for summing in `accumulate`?	The last argument.	chapter:6	Accelerated C++
Filter out even numbers in `in` and put the result in `out`.	`std::remove_copy(in.begin(), in.end(), std::back_inserter(out), [](auto &amp; v) { return v % 0 == 1; })`	chapter:6	Accelerated C++
What is the first set of iterators provided to most algorithms?	The input range	chapter:6	Accelerated C++
What does `remove_if` do?	Moves matching elements to the front of the container and returns the new end iterator.	chapter:6	Accelerated C++
